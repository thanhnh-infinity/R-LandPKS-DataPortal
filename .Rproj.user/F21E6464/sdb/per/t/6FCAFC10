{
    "contents" : "## Author: Nasim Gh. \n## email: n-ghazan@nmsu.edu\n\n## Editor : Thanh Nguyen\n## email : thanhnh@nmsu.edu\n\n#install.packages(\"jsonlite\", repos=\"http://cran.r-project.org\")\n#install.packages('googleVis')\n#install.packages(\"shiny\")\n#install.packages(\"htmlwidgets\")\n#install.packages(\"shinyjs\")\n#install.packages(\"gtools\")\n\nlibrary(jsonlite)\nlibrary(googleVis)\nlibrary(httr)\nlibrary(shiny)\nlibrary(plyr)\nlibrary(gtools)\nsource('Auth.R')\n\n\n\n# 1. Find OAuth settings for google:\n#    https://developers.google.com/accounts/docs/OAuth2InstalledApp\noauth_endpoints(\"google\")\n\n# 2. Register an application at https://cloud.google.com/console#/project\nmyapp <- oauth_app(\"google\",\n                   key = myKey,\n                   secret = mySecret)\n\n\n# 3. Get OAuth credentials\ngoogle_token <- oauth2.0_token(oauth_endpoints(\"google\"), myapp,\n                               scope = c(\"https://www.googleapis.com/auth/userinfo.profile\",\"https://www.googleapis.com/auth/userinfo.email\"))\n\n\nrowCount <-0\n\n######unlist monthly data columns\nconvertToDt<-function(col,type){\n  df <- data.frame(matrix(ncol = 12, nrow = rowCount))\n  if(type == 'min' || type == 'max'){\n    colnames(df) <- paste0(type,'_temp_',month.name,' (C)') \n  }\n  else\n    colnames(df) <- paste0('precipitation_',month.name,' (mm)')  \n  \n  for(i in 1:rowCount){\n    if(! is.null(col[i]))\n    {\n      df[i,]<-unlist(col[i])\n    }\n  }\n  return (df)\n}\n\n########### encrypt email addresses not to be shown fully\nobscureEmail<-function(emails){\n  i<-1\n  result <- NULL\n  for(em in emails){\n    at<-regexpr(\"@\",em)[1]\n    result[i]<-paste0(substr(em,1,3),\"********\" ,substr(em,at-1,at-1)) \n    i<- i+1\n  }\n  return (result)\n}\n\n############ unlist a list column and paste with a comma\nunlistCol<- function(col){\n  df <- NULL\n  \n  for(i in 1:rowCount){\n    if(! is.null(col[i]))\n    {\n      df[i]<- paste(unlist(col[i]),collapse = \", \")\n    }\n  }\n  return (df)\n}\n\n#Reads land cover data for recorder name\n#############################\ngetLandCoverData<- function(recorder){\n\n  recorderRep <- sub(\"@\", \"%40\", recorder)\n  \n  request <- GET(paste0(\"https://silicon-bivouac-496.appspot.com/_ah/api/transectendpoint/v1/transect?otherUser=\",recorderRep),\n             config(token = google_token))\n  stop_for_status(request)\n  cover_data<-content(request,as = \"text\")\n  \n  cover_data <- fromJSON(cover_data)\n  cover_data <- cover_data$items\n  \n  if(is.null(cover_data))\n  {\n    return (NULL)\n  }\n  \n  cover_data<- getCoverData(recorder,cover_data)\n  \n  print(paste(recorder,nrow(cover_data),\"*****\",ncol(cover_data)))\n\n  return (cover_data)\n  \n}\n\n\n###########################\n### returns the column value in df and null if not included\ngetColumn<-function(df, colname){\n  if(colname %in% names(df)){\n    return (df[,colname])\n  } else {\n    return (\"\")\n  }\n}\n\n\n##Calculates and addes the formulas at the end of csv file\n#############################\ncalcFormulas<-function(df){\n  names<- unique(df$name)\n     \n  for(i in 1:length(names) ){\n    rowNo <- (i-1)*20 +1\n    plot <-subset(df,name == names[i])\n    \n    plot_total_bare_ground <- sum( plot$bare_total)\n    df[rowNo, \"plot_total_cover\"] <- 100 - plot_total_bare_ground\n    df[rowNo, \"plot_total_bare_ground\"]<- plot_total_bare_ground\n    df[rowNo, \"plot_total_foliar_cover\"] <- sum( plot$trees_total + plot$shrubs_total + plot$sub_shrubs_total + plot$perennial_grasses_total + plot$annuals_total )\n\n    df[rowNo,\"plot_total_plant_cover/composition_tree\"] <- sum(plot$trees_total)\n    df[rowNo,\"plot_total_plant_cover/composition_shrub\"]<- sum(plot$shrubs_total)\n    df[rowNo,\"plot_total_plant_cover/composition_sub_shrub\"] <- sum(plot$sub_shrubs_total)\n    df[rowNo,\"plot_total_plant_cover/composition_perennial_grasses\"] <-  sum(plot$perennial_grasses_total)\n    df[rowNo,\"plot_total_plant_cover/composition_annuals\"] <-  sum(plot$annuals_total)\n    df[rowNo,\"plot_total_plant_cover/composition_herb_litter\"] <- sum(plot$herb_litter_total)\n    df[rowNo,\"plot_total_plant_cover/composition_wood_litter\"] <- sum(plot$wood_litter_total)\n    df[rowNo,\"plot_total_plant_cover/composition_rock\"] <- sum(plot$rock_total)\n    \n    \n    df[rowNo,\"plot_total_canopy_height_smaller_10_cm\"] <- nrow(subset(plot,canopy_height==\"<10cm\")) *5\n    df[rowNo,\"plot_total_canopy_height_10_50_cm\"] <- nrow(subset(plot,canopy_height==\"10-50cm\")) *5\n    df[rowNo,\"plot_total_canopy_height_50cm_1m\"]\t<- nrow(subset(plot,canopy_height==\"50cm-1m\")) *5\n    df[rowNo,\"plot_total_canopy_height_1m_2m\"]\t<- nrow(subset(plot,canopy_height==\"1-2m\")) *5\n    df[rowNo,\"plot_total_canopy_height_2m_3m\"]\t<- nrow(subset(plot,canopy_height==\"2-3m\")) *5\n    df[rowNo,\"plot_total_canopy_height_greater_3m\"] <- nrow(subset(plot,canopy_height==\">3m\")) *5\n    \n    df[rowNo,\"plot_total_canopy_gap_percentage\"] <- sum(as.logical(plot$canopy_gap))*5 \n    df[rowNo,\"plot_total_basal_gap_percentage\"] <- sum(as.logical(plot$basal_gap))*5\n    \n    #Fix empty list\n    #check <- 0\n    for(j in 1:length(plot$species_of_interest_1_count)){\n      if (is.numeric(as.numeric(plot$species_of_interest_1_count[[j]])) == FALSE){\n        #check <- check + 1\n        plot$species_of_interest_1_count[j] <- 0\n      }\n    }\n    \n    for(j in 1:length(plot$species_of_interest_2_count)){\n      if (is.numeric(as.numeric(plot$species_of_interest_2_count[[j]])) == FALSE){\n        #check <- check + 1\n        plot$species_of_interest_2_count[j] <- 0\n      }\n    }\n    #cat(\"\\n\",i,\" [1] : \", sum(as.numeric(plot$species_of_interest_1_count),na.rm = TRUE)/20, \" Du lieu :\" , plot$species_of_interest_1_count)\n    df[rowNo,\"species_of_interest_1_density\"] <- sum(as.numeric(plot$species_of_interest_1_count),na.rm = TRUE)/20\n    df[rowNo,\"species_of_interest_2_density\"] <- sum(as.numeric(plot$species_of_interest_2_count),na.rm = TRUE)/20\n    \n  }\n  return (df)\n}\n\n#############################\n##reads the landCover data from GAE and return in format\ngetCoverData<-function(userName,items){\n  \n  result <<-  data.frame(matrix(ncol = 48, nrow = 0))\n  \n  colnames(result) <- c(\"name\", \"date\", \n                        \"dominant_woody_species\",\"dominant_nonwoody_species\",\n                        \"transect\",  \"segment\"\t,\"canopy_height\",\t\"canopy_gap\",\t\"basal_gap\",\t\n                        \"stick_segment_1\",\"stick_segment_2\",\t\"stick_segment_3\",\t\"stick_segment_4\",\t\"stick_segment_5\",\n                        \"bare_total\",  \"trees_total\",\t\"shrubs_total\",\t\"sub_shrubs_total\",\t\"perennial_grasses_total\",\t\"annuals_total\"\t,\"herb_litter_total\",\t\"wood_litter_total\",\t\"rock_total\",\n                        \"plot_total_cover\",  \"plot_total_bare_ground\",\t\"plot_total_foliar_cover\",\n                        \"plot_total_plant_cover/composition_tree\",\t\"plot_total_plant_cover/composition_shrub\",\t\"plot_total_plant_cover/composition_sub_shrub\",\t\"plot_total_plant_cover/composition_perennial_grasses\",\t\"plot_total_plant_cover/composition_annuals\",\"plot_total_plant_cover/composition_herb_litter\",\t\"plot_total_plant_cover/composition_wood_litter\",\t\"plot_total_plant_cover/composition_rock\"\t,\n                        \"plot_total_canopy_height_smaller_10_cm\",\t\"plot_total_canopy_height_10_50_cm\",\t\"plot_total_canopy_height_50cm_1m\",\t\"plot_total_canopy_height_1m_2m\",\t\"plot_total_canopy_height_2m_3m\",\t\"plot_total_canopy_height_greater_3m\"\t,\n                        \"plot_total_canopy_gap_percentage\"\t,\"plot_total_basal_gap_percentage\",\n                        \"species_of_interest_1\", \"species_of_interest_1_count\", \"species_of_interest_1_density\",\n                        \"species_of_interest_2\", \"species_of_interest_2_count\", \"species_of_interest_2_density\"\n                        )\n  \n  coverList<- c(\"Bare\",\"Trees\",\"Shrubs\",\"Sub-shrubs\",\"Perennial grasses\",\"Annuals\",\"Herb litter\",\"Wood litter\",\"Rock\")\n  \n  for(i in 1:nrow(items)){ \n    item<- items[i,]\n    name = gsub(paste0(userName,\"-\"),\"\",item[\"siteID\"])\n    recorder_name = userName\n    transect = item[\"direction\"]\n    \n    dominant_woody_species  = getColumn(item, \"dominantWoodySpecies\")\n    dominant_nonwoody_species= getColumn(item, \"dominantNonwoodySpecies\")    \n    \n    speciesOfInterest1 = getColumn(item, \"speciesOfInterest1\")\n    speciesOfInterest2 = getColumn(item, \"speciesOfInterest2\")\n    \n    segments<- as.data.frame(item$segments)\n\n    for( j in 1:nrow(segments)){\n      segment <- segments[j,]   \n      rowNo <- j +(i-1)*5\n      \n      result[rowNo,\"name\"] <- name\n      result[rowNo,\"date\"] = getColumn(segment,\"date\")\n      \n      result[rowNo,\"dominant_woody_species\"] = dominant_woody_species  \n      result[rowNo,\"dominant_nonwoody_species\"] = dominant_nonwoody_species\n      \n      result[rowNo,\"transect\"]<- transect\n         \n      result[rowNo,\"segment\"] = getColumn(segment,\"range\")\n      \n      result[rowNo,\"canopy_height\"] = getColumn(segment,\"canopyHeight\")\n      result[rowNo,\"canopy_gap\"] = getColumn(segment,\"canopyGap\")\n      result[rowNo,\"basal_gap\"] = getColumn(segment,\"basalGap\")\n        \n      result[rowNo,\"stick_segment_1\"] = paste(coverList [unlist(segment$stickSegments[[1]]$covers[1])],collapse = \", \")\n      result[rowNo,\"stick_segment_2\"] = paste(coverList [unlist(segment$stickSegments[[1]]$covers[2])],collapse = \", \")\n      result[rowNo,\"stick_segment_3\"] = paste(coverList [unlist(segment$stickSegments[[1]]$covers[3])],collapse = \", \")\n      result[rowNo,\"stick_segment_4\"] = paste(coverList [unlist(segment$stickSegments[[1]]$covers[4])],collapse = \", \")\n      result[rowNo,\"stick_segment_5\"] = paste(coverList [unlist(segment$stickSegments[[1]]$covers[5])],collapse = \", \")\n      \n      \n      covers <-  do.call(rbind,segment$stickSegments[[1]]$covers)\n      \n      result[rowNo,\"bare_total\"] <- length(covers[covers[,1]==TRUE,1])\n      result[rowNo,\"trees_total\"]<- length(covers[covers[,2]==TRUE,2])\n      result[rowNo,\"shrubs_total\"]<- length(covers[covers[,3]==TRUE,3])\n      result[rowNo,\"sub_shrubs_total\"]<- length(covers[covers[,4]==TRUE,4])\n      result[rowNo,\"perennial_grasses_total\"]<- length(covers[covers[,5]==TRUE,5])\n      result[rowNo,\"annuals_total\"]<- length(covers[covers[,6]==TRUE,6])\n      result[rowNo,\"herb_litter_total\"] <- length(covers[covers[,7]==TRUE,7])\n      result[rowNo,\"wood_litter_total\"]<- length(covers[covers[,8]==TRUE,8])\n      result[rowNo,\"rock_total\"]<- length(covers[covers[,9]==TRUE,9])\n     \n      \n      result[rowNo,\"species_of_interest_1\"] = speciesOfInterest1\n      result[rowNo,\"species_of_interest_1_count\"] = getColumn(segment,\"speciesOfInterest1Count\")\n      #result[rowNo,\"species_of_interest_1_density\"] = getColumn(segment,\"species1Density\")\n   \n      result[rowNo,\"species_of_interest_2\"] = speciesOfInterest2\n      result[rowNo,\"species_of_interest_2_count\"] = getColumn(segment,\"speciesOfInterest2Count\")\n     # result[rowNo,\"species_of_interest_2_density\"] = getColumn(segment,\"species2Density\")\n\n    }\n  } \n  \n  return (calcFormulas(result))\n  \n}\n\n\n#reads list of plots from GAE\n###################################\ngetPlotListData<-function(){\n  # 4. Use API\n  req <- GET(\"https://silicon-bivouac-496.appspot.com/_ah/api/plotendpoint/v1/plot?allUsers=true\",\n             config(token = google_token))\n  stop_for_status(req)\n  json_data<-content(req,as = \"text\")\n  \n  json_data <- fromJSON(json_data)\n  json_data <- json_data$items\n  \n  json_data$obscRecorderName <- obscureEmail(json_data$recorderName)\n  json_data$grazingLst <- unlistCol(json_data$grazing)\n  \n  rowCount <<- nrow(json_data)\n  \n  csv_data <- subset(json_data, select = c(\n    name,recorderName, obscRecorderName, testPlot, latitude,\tlongitude, modifiedDate,\tlandCover,\tgrazed,\tgrazingLst,\tflooding,\tslope,\tslopeShape,\tbedrockDepth,\tstoppedDiggingDepth,\t\n    rockFragmentForSoilHorizon1,\n    rockFragmentForSoilHorizon2,\t\n    rockFragmentForSoilHorizon3,\n    rockFragmentForSoilHorizon4,\n    rockFragmentForSoilHorizon5,\n    rockFragmentForSoilHorizon6,\n    rockFragmentForSoilHorizon7,\n    textureForSoilHorizon1,\n    textureForSoilHorizon2,\n    textureForSoilHorizon3,\n    textureForSoilHorizon4,\n    textureForSoilHorizon5,\n    textureForSoilHorizon6,\n    textureForSoilHorizon7,\n    surfaceCracking,\tsurfaceSalt,\t\n    landscapeNorthPhotoURL,\n    landscapeEastPhotoURL,\t\n    landscapeSouthPhotoURL,\n    landscapeWestPhotoURL,\n    soilPitPhotoURL,\n    soilSamplesPhotoURL))\n  \n    csv_data = cbind(csv_data,convertToDt(json_data$monthlyMaxTemperature,\"max\"))\n    csv_data = cbind(csv_data,convertToDt(json_data$monthlyMinTemperature,\"min\"))\n    csv_data = cbind(csv_data,convertToDt(json_data$monthlyPrecipitation,\"prec\"))\n  \n  csv_data <- cbind(csv_data,json_data[ c(\n    'averageAnnualPrecipitation',\n    'awcSoilProfile',\n    'gdalElevation',\n    'gdalFaoLgp',\n    'gdalAridityIndex')])\n  \n  \n  colnames(csv_data) <- c(\"name\",\"recName\",\"RecorderName\",\"test_plot\",\"latitude\",\"longitude\",\"modified_date\",\"land_cover\",\"grazed\",\"grazing\",\"flooding\",\"slope\",\"slope_shape\",\"bedrock_depth\",\"stopped_digging_depth\",\n  \"rock_fragment_for_soil_horizon_1\",\"rock_fragment_for_soil_horizon_2\",\"rock_fragment_for_soil_horizon_3\",\"rock_fragment_for_soil_horizon_4\",\"rock_fragment_for_soil_horizon_5\",\"rock_fragment_for_soil_horizon_6\",\"rock_fragment_for_soil_horizon_7\",\n  \"texture_for_soil_horizon_1\",\"texture_for_soil_horizon_2\",\"texture_for_soil_horizon_3\",\"texture_for_soil_horizon_4\",\"texture_for_soil_horizon_5\",\"texture_for_soil_horizon_6\",\"texture_for_soil_horizon_7\",\n  \"surface_cracking\",\"surface_salt\",\n  \"landscape_north_photo_url\",\"landscape_east_photo_url\",\"landscape_south_photo_url\",\"landscape_west_photo_url\",\"soil_pit_photo_url\",\"soil_samples_photo_url\",\n  \"max_temp_January (C)\",\"max_temp_February (C)\",\"max_temp_March (C)\",\"max_temp_April (C)\",\"max_temp_May (C)\",\"max_temp_June (C)\",\"max_temp_July (C)\",\"max_temp_August (C)\",\"max_temp_September (C)\",\"max_temp_October (C)\",\"max_temp_November (C)\",\"max_temp_December (C)\",\n  \"min_temp_January (C)\",\"min_temp_February (C)\",\"min_temp_March (C)\",\"min_temp_April (C)\",\"min_temp_May (C)\",\"min_temp_June (C)\",\"min_temp_July (C)\",\"min_temp_August (C)\",\"min_temp_September (C)\",\"min_temp_October (C)\",\"min_temp_November (C)\",\"min_temp_December (C)\",\n  \"precipitation_January (mm)\",\"precipitation_February (mm)\",\"precipitation_March (mm)\",\"precipitation_April (mm)\",\"precipitation_May (mm)\",\"precipitation_June (mm)\",\"precipitation_July (mm)\",\"precipitation_August (mm)\",\"precipitation_September (mm)\",\"precipitation_October (mm)\",\"precipitation_November (mm)\",\"precipitation_December (mm)\",\n  \"precipitation_annual (mm)\",\"soil_profile_AWC (cm)\",\"Elevation (m)\",\" FAO Length of Growing Period (days/year)\",\"Aridity Index\")\n  \n  return (csv_data)\n}\n\n\n###########\nupdateRequestedData<-function(recorder,dataType){\n  \n  if(dataType == \"Metadata for LandInfo\" )\n  {\n    return (read.csv(\"./Export_METADATA_LandInfo.csv\"))\n  }\n  if(dataType ==\"Metadata for LandCover\")\n  { \n    return (read.csv(\"./Export_METADATA_LandCover.csv\"))   \n  }\n          \n  plotData <-getPlotListData()\n  \n  if(dataType == \"LandInfo\"){ \n    if(recorder !=\"all\"){\n      plotData <- plotData[plotData$recName==recorder ,]\n    }\n    \n    return (plotData)\n  }\n  \n  if(dataType == \"LandCover\"){\n    if(recorder ==\"all\"){\n      recorder<-  unique(plotData$recName)\n    }\n    \n    coverData <- NULL\n    for(rec in recorder){\n      data <- getLandCoverData(rec)\n      \n      if(!is.null(data)){\n        \n      if(is.null (coverData )){\n        \n        coverData = data\n      }\n      else\n        coverData <- rbind.fill(data,coverData)\n    \n      }\n    }\n    \n    return (coverData)\n  }\n  \n  \n  \n  return (NULL)\n  # req_data$recName <- NULL#req_data [,-which(names(req_data) %in% c(\"recName\"))]     \n}\n\n",
    "created" : 1450317857894.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2278379978",
    "id" : "6FCAFC10",
    "lastKnownWriteTime" : 1449103573,
    "path" : "/Volumes/Develop_Data_MacOS/All_Workspace/R_Workspace/DataPortal_ExportLandPKS_V3/helpers.R",
    "project_path" : "helpers.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}